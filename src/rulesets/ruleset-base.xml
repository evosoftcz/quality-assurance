<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="base"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="../../vendor/squizlabs/php_codesniffer/phpcs.xsd">

    <!-- Configure ruleset -->
    <arg value="p"/>
    <arg value="s"/>
    <arg name="colors"/>
    <arg name="parallel" value="1"/>
    <arg name="tab-width" value="4"/>
    <arg name="encoding" value="utf-8"/>
    <arg name="extensions" value="php"/>

    <!--
        Arrays
    -->

    <rule ref="Generic.Arrays.ArrayIndent">
        <!-- Multiline items don't work properly -->
        <exclude name="Generic.Arrays.ArrayIndent.CloseBraceNotNewLine"/>
    </rule>
    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>
    <rule ref="Squiz.Arrays.ArrayDeclaration">
        <!-- Multiple items key => value alignment just looks bad -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.KeyNotAligned"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.DoubleArrowNotAligned"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.ValueNotAligned"/>
        <!-- Don't enforce items count per line -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.FirstIndexNoNewline"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.FirstValueNoNewline"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.MultiLineNotAllowed"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.CloseBraceNewLine"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.IndexNoNewline"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.ValueNoNewline"/>
        <!-- Comma is enforced by SlevomatCodingStandard.Arrays.TrailingArrayComma -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.NoComma"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.NoCommaAfterLast"/>
    </rule>
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>

    <!--
        Classes
    -->

    <rule ref="Generic.Classes.DuplicateClassName"/>
    <rule ref="PSR1.Classes.ClassDeclaration"/>
    <rule ref="PEAR.Classes.ClassDeclaration"/>
    <rule ref="Squiz.Classes.SelfMemberReference"/>
    <rule ref="Squiz.Classes.ValidClassName"/>
    <rule ref="PSR2.Classes.PropertyDeclaration"/>

    <!--
        Comments
    -->
    <rule ref="Generic.Commenting.DocComment">
        <exclude name="Generic.Commenting.DocComment.ContentAfterOpen"/>
        <exclude name="Generic.Commenting.DocComment.ContentBeforeClose"/>
        <exclude name="Generic.Commenting.DocComment.LongNotCapital"/>
        <exclude name="Generic.Commenting.DocComment.MissingShort"/>
        <exclude name="Generic.Commenting.DocComment.NonParamGroup"/>
        <exclude name="Generic.Commenting.DocComment.ShortNotCapital"/>
        <exclude name="Generic.Commenting.DocComment.SpacingBeforeTags"/>
        <exclude name="Generic.Commenting.DocComment.TagsNotGrouped"/>
        <exclude name="Generic.Commenting.DocComment.TagValueIndent"/>
    </rule>
    <rule ref="PEAR.Commenting.InlineComment"/>
    <rule ref="Squiz.Commenting.DocCommentAlignment">
        <!-- Doctrine have compound annotations support, space after star is valid -->
        <exclude name="Squiz.Commenting.DocCommentAlignment.SpaceAfterStar"/>
    </rule>
    <rule ref="Squiz.Commenting.EmptyCatchComment"/>
    <rule ref="Squiz.Commenting.FunctionComment">
        <!-- Thrown error should be self-describing, comment not needed -->
        <exclude name="Squiz.Commenting.FunctionComment.EmptyThrows"/>
        <exclude name="Squiz.Commenting.FunctionComment.ThrowsNoFullStop"/>
        <exclude name="Squiz.Commenting.FunctionComment.ThrowsNotCapital"/>
        <!-- Supports only built-in types of given php version and is also checked by PHPStan -->
        <exclude name="Squiz.Commenting.FunctionComment.IncorrectTypeHint"/>
        <exclude name="Squiz.Commenting.FunctionComment.InvalidReturn"/>
        <exclude name="Squiz.Commenting.FunctionComment.InvalidReturnNotVoid"/>
        <!-- Don't force int=>integer, bool=>boolean -->
        <exclude name="Squiz.Commenting.FunctionComment.IncorrectParamVarName"/>
        <!-- Comments are not required -->
        <exclude name="Squiz.Commenting.FunctionComment.Missing"/>
        <exclude name="Squiz.Commenting.FunctionComment.MissingReturn"/>
        <exclude name="Squiz.Commenting.FunctionComment.MissingParamComment"/>
        <exclude name="Squiz.Commenting.FunctionComment.MissingParamTag"/>
        <!-- Comments support complex types while php not, mismatch should be checked by static analysis (e.g. PHPStan) -->
        <exclude name="Squiz.Commenting.FunctionComment.ParamNameNoMatch"/>
        <!-- Comments don't have to be sentences -->
        <exclude name="Squiz.Commenting.FunctionComment.ParamCommentFullStop"/>
        <exclude name="Squiz.Commenting.FunctionComment.ParamCommentNotCapital"/>

        <!-- Superseded by SlevomatCodingStandard.TypeHints.ParameterTypeHint -->
        <exclude name="Squiz.Commenting.FunctionComment.ScalarTypeHintMissing"/>
        <exclude name="Squiz.Commenting.FunctionComment.TypeHintMissing"/>
        <!-- Buggy with annotated and native types mix, superseded by PHPStan -->
        <exclude name="Squiz.Commenting.FunctionComment.InvalidTypeHint"/>
        <!-- Multiline alignments just looks bad -->
        <exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamName"/>
        <exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamType"/>
        <!-- Reports standalone comments not related to a function -->
        <exclude name="Squiz.Commenting.FunctionComment.WrongStyle"/>
    </rule>
    <rule ref="Squiz.Commenting.FunctionComment.ExtraParamComment">
        <message>Function has more @param annotations than params</message>
    </rule>
    <rule ref="Squiz.Commenting.FunctionComment.DuplicateReturn">
        <message>Function must have only one @return annotation</message>
    </rule>
    <rule ref="Squiz.Commenting.FunctionComment.InvalidNoReturn">
        <message>Function has no return statement, but annotation @return is present</message>
    </rule>
    <rule ref="Squiz.Commenting.FunctionComment.InvalidThrows">
        <message>'Exception type missing for @throws tag in function comment'</message>
    </rule>
    <rule ref="Squiz.Commenting.VariableComment">
        <exclude name="Squiz.Commenting.VariableComment.TagNotAllowed"/>
        <!-- Don't force int=>integer, bool=>boolean -->
        <exclude name="Squiz.Commenting.VariableComment.IncorrectVarType"/>
        <!-- Property may have native type -->
        <exclude name="Squiz.Commenting.VariableComment.Missing"/>
        <exclude name="Squiz.Commenting.VariableComment.MissingVar"/>
    </rule>

    <!--
        Code analysis
    -->

    <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>

    <!--
        Control structures
    -->

    <rule ref="Generic.ControlStructures.InlineControlStructure"/>
    <rule ref="PSR2.ControlStructures.SwitchDeclaration">
        <!-- Checked by more Generic.WhiteSpace.ScopeIndent.Incorrect -->
        <exclude name="PSR2.ControlStructures.SwitchDeclaration.caseIndent"/>
        <exclude name="PSR2.ControlStructures.SwitchDeclaration.defaultIndent"/>
    </rule>
    <rule ref="PSR2.ControlStructures.ElseIfDeclaration"/>
    <rule ref="PSR2.ControlStructures.ElseIfDeclaration.NotAllowed">
        <type>error</type>
    </rule>

    <!--
        Files
    -->

    <rule ref="Generic.Files.ByteOrderMark"/>
    <rule ref="Generic.Files.InlineHTML"/>
    <rule ref="Generic.Files.LineEndings">
        <properties>
            <property name="eolChar" value="\n"/>
        </properties>
    </rule>
    <rule ref="PSR1.Files.SideEffects"/>
    <rule ref="PSR2.Files.ClosingTag"/>
    <rule ref="PSR2.Files.EndFileNewline"/>

    <!--
        Formatting
    -->

    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <rule ref="Generic.Formatting.SpaceAfterNot">
        <properties>
            <property name="spacing" value="0"/>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>
    <rule ref="PEAR.Formatting.MultiLineAssignment"/>

    <!--
        Functions
    -->

    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="equalsSpacing" value="1"/>
        </properties>
    </rule>
    <rule ref="Squiz.Functions.MultiLineFunctionDeclaration">
        <!-- Conflicts with OpeningFunctionBraceBsdAllman -->
        <exclude name="Squiz.Functions.MultiLineFunctionDeclaration.NewlineBeforeOpenBrace"/>
        <!-- Conflicts with return typehints with no space before colon in anonymous functions -->
        <exclude name="Squiz.Functions.MultiLineFunctionDeclaration.SpaceAfterBracket"/>
    </rule>
    <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
    <rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman"/>

    <!--
        Methods
    -->

    <rule ref="PSR2.Methods.FunctionCallSignature">
        <!-- Space after closing bracket should depend on where is function called -->
        <exclude name="PSR2.Methods.FunctionCallSignature.SpaceAfterCloseBracket"/>
    </rule>
    <rule ref="PSR2.Methods.MethodDeclaration"/>

    <!--
        Namespaces
    -->

    <rule ref="PSR2.Namespaces.UseDeclaration"/>

    <!--
        Naming conventions
    -->

    <rule ref="Generic.NamingConventions.ConstructorName"/>
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
    <rule ref="Generic.NamingConventions.CamelCapsFunctionName">
        <properties>
            <property name="strict" value="false"/>
        </properties>
    </rule>

    <!--
        Operators
    -->

    <rule ref="Squiz.Operators.IncrementDecrementUsage">
        <exclude name="Squiz.Operators.IncrementDecrementUsage.NoBrackets"/>
    </rule>
    <rule ref="Squiz.Operators.ValidLogicalOperators"/>
    <!--
        PHP
    -->

    <rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/>
    <rule ref="Generic.PHP.DisallowShortOpenTag"/>
    <rule ref="Squiz.PHP.GlobalKeyword"/>
    <rule ref="Generic.PHP.LowerCaseConstant"/>
    <rule ref="Generic.PHP.LowerCaseKeyword"/>
    <rule ref="Generic.PHP.LowerCaseType"/>
    <rule ref="Squiz.PHP.InnerFunctions"/>
    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>
    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array">
                <element key="chop" value="rtrim"/>
                <element key="close" value="closedir"/>
                <element key="delete" value="unset"/>
                <element key="die" value="exit"/>
                <element key="doubleval" value="floatval"/>
                <element key="fputs" value="fwrite"/>
                <element key="ini_alter" value="ini_set"/>
                <element key="is_double" value="is_float"/>
                <element key="is_integer" value="is_int"/>
                <element key="is_long" value="is_int"/>
                <element key="is_null" value="null"/>
                <element key="is_real" value="is_float"/>
                <element key="is_writeable" value="is_writable"/>
                <element key="join" value="implode"/>
                <element key="key_exists" value="array_key_exists"/>
                <element key="pos" value="current"/>
                <element key="print" value="echo"/>
                <element key="show_source" value="highlight_file"/>
                <element key="sizeof" value="count"/>
                <element key="strchr" value="strstr"/>
            </property>
        </properties>
    </rule>

    <!--
        Scope
    -->

    <rule ref="Squiz.Scope.MethodScope"/>
    <rule ref="Squiz.Scope.StaticThisUsage"/>

    <!--
        Strings
    -->

    <rule ref="Squiz.Strings.DoubleQuoteUsage">
        <exclude name="Squiz.Strings.DoubleQuoteUsage.ContainsVar"/>
    </rule>
    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
            <property name="spacing" value="1"/>
        </properties>
    </rule>
    <rule ref="Squiz.Strings.EchoedStrings"/>
    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <properties>
            <property name="allowMultiline" value="true"/>
        </properties>
    </rule>

    <!--
        Whitespace
    -->

    <rule ref="Generic.WhiteSpace.ArbitraryParenthesesSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.CastSpacing"/>
    <rule ref="PEAR.WhiteSpace.ObjectOperatorIndent"/>
    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.OperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace"/>
    <rule ref="Squiz.WhiteSpace.FunctionSpacing">
        <properties>
            <property name="spacing" value="0"/>
        </properties>
        <!-- Does not allow PHPUnit ignore comments -->
        <exclude name="Squiz.WhiteSpace.FunctionSpacing.Before"/>
        <exclude name="Squiz.WhiteSpace.FunctionSpacing.After"/>
    </rule>
    <rule ref="Generic.WhiteSpace.LanguageConstructSpacing"/>
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>
    <rule ref="Squiz.WhiteSpace.ScopeClosingBrace"/>
    <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>
    <rule ref="Generic.WhiteSpace.ScopeIndent">
        <properties>
            <property name="tabIndent" value="true"/>
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <property name="ignoreBlankLines" value="false"/>
        </properties>
    </rule>

</ruleset>
